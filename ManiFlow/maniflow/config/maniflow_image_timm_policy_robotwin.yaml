defaults:
  - robotwin_task: diverse_bottles_pick_image

name: train_maniflow_image_timm_policy

task_name: ${robotwin_task.name}
shape_meta: ${robotwin_task.shape_meta}
exp_name: "debug"

horizon: 16
n_obs_steps: 2
n_action_steps: 16
n_latency_steps: 0
dataset_obs_steps: ${n_obs_steps}
keypoint_visible_rate: 1.0
obs_as_global_cond: true

policy:
  _target_: maniflow.policy.maniflow_image_policy.ManiFlowTransformerImagePolicy
  block_type: "DiTX"
  n_layer: 12  # max 28
  n_head: 8  # max 16
  n_emb: 768 # max 1152
  visual_cond_len: 1024 # max 1024
  max_lang_cond_len: 1024 # maximum length of language tokens
  qkv_bias: true
  qk_norm: true

  language_conditioned: false
  pre_norm_modality: false

  flow_batch_ratio: 0.75 
  consistency_batch_ratio: 0.25

  sample_t_mode_flow: "beta" # choose between beta or lognorm, both are performing well
  sample_t_mode_consistency: "discrete" 
  sample_dt_mode_consistency: "uniform"
  sample_target_t_mode: "relative" # "absolute", "relative"
  denoise_timesteps: 10

  diffusion_timestep_embed_dim: 128
  diffusion_target_t_embed_dim: 128


  horizon: ${horizon}
  n_action_steps: ${n_action_steps}
  n_obs_steps: ${n_obs_steps}

  num_inference_steps: 10
  obs_as_global_cond: true
  shape_meta: ${shape_meta}

  obs_encoder:
    _target_: maniflow.model.vision_2d.timm_obs_encoder.TimmObsEncoder
    shape_meta: ${shape_meta}

    ##### from scratch #####
    # model_name: 'vit_base_patch16_224'
    # model_name: 'resnet34'
    # model_name: 'vit_tiny_patch16_224'
    # model_name: 'efficientnet_b0'
    # model_name: 'efficientnet_b3'
    # pretrained: False
    # frozen: False

    ##### from scratch #####
    # model_name: 'resnet34.a1_in1k'
    # model_name: 'vit_base_patch16_clip_224.openai'
    # model_name: 'convnext_base.clip_laion2b_augreg_ft_in12k'
    # pretrained: True
    # frozen: False
    
    model_name: 'r3m'
    pretrained: False
    frozen: False

    global_pool: ''

    feature_aggregation: null
    position_encording: 'sinusoidal' # 'learnable' or 'sinusoidal'. it only works for transformer

    downsample_ratio: 32

    transforms:
      - type: RandomCrop
        ratio: 0.95
      - _target_: torchvision.transforms.RandomRotation
        degrees:
          - -5.0
          - 5.0
        expand: false
      - _target_: torchvision.transforms.ColorJitter
        brightness: 0.3
        contrast: 0.4
        saturation: 0.5
        hue: 0.08
     
    use_group_norm: True
    share_rgb_model: False
    imagenet_norm: True


ema:
  _target_: maniflow.model.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.0
  power: 0.75
  min_value: 0.0
  max_value: 0.9999

dataloader:
  batch_size: 128
  num_workers: 8
  shuffle: True
  pin_memory: True
  persistent_workers: True
  # drop_last: True

val_dataloader:
  batch_size: 128 # 128
  num_workers: 8
  shuffle: False
  pin_memory: True
  persistent_workers: False
  # drop_last: True

optimizer:
  _target_: torch.optim.AdamW
  lr: 1.0e-4
  betas: [0.9, 0.95]
  eps: 1.0e-8
  weight_decay: 1.0e-3

training:
  device: "cuda:0"
  env_device: "cuda:0"
  seed: 42
  debug: False
  resume: True
  lr_scheduler: cosine
  lr_warmup_steps: 500
  num_epochs: 501
  gradient_accumulate_every: 1
  use_ema: True
  rollout_every: 100
  checkpoint_every: 100
  val_every: 50
  sample_every: 5
  max_train_steps: null
  max_val_steps: null
  tqdm_interval_sec: 1.0

logging:
  group: ${exp_name}
  id: null
  mode: online
  name: ${training.seed}
  project: ManiFlow_2d
  resume: true
  tags:
  - ${logging.project}

checkpoint:
  save_ckpt: True # if True, save checkpoint every checkpoint_every
  topk:
    monitor_key: val_loss # test_mean_score, val_loss
    # mode: max
    # k: 0
    # format_str: 'epoch={epoch:04d}-test_mean_score={test_mean_score:.3f}.ckpt'
    mode: min
    k: 1
    format_str: 'epoch={epoch:04d}-val_loss={val_loss:.6f}.ckpt'
  save_last_ckpt: True # this only saves when save_ckpt is True
  save_last_snapshot: False

multi_run:
  run_dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}

hydra:
  job:
    override_dirname: ${name}
  run:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  sweep:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
    subdir: ${hydra.job.num}
